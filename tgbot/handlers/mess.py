from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message

from tgbot.keyboards.inline import personal_data_choice
from tgbot.misc.states import UsersStates
from tgbot.models.commands import get_or_create_user


async def mess(message: Message, state: FSMContext) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É /mess.
    –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –∏–º—è.
    """

    await state.finish()
    async with state.proxy() as data:
        data['last_command'] = 'mess'
        data['user_id'] = int(message.from_user.id)

    user = await get_or_create_user(user_id=int(message.from_user.id))
    if user.fullname == '–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
        await UsersStates.user_fullname.set()
    else:
        async with state.proxy() as data:
            data['user_phone'] = user.phone_number
            data['user_fullname'] = user.fullname
        await message.answer(f'–í–∞—à–µ –∏–º—è: <b>{user.fullname}</b>\n'
                             f'üí° –í–µ—Ä–Ω–æ?',
                             reply_markup=personal_data_choice, parse_mode='html')


def register_mess(dp: Dispatcher):
    dp.register_message_handler(mess, commands=["mess"], state="*"),
