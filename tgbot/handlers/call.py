from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery

from tgbot.keyboards.inline import personal_data_choice
from tgbot.keyboards.reply import share_phone
from tgbot.misc.states import UsersStates, ProductStates
from tgbot.models.commands import get_or_create_user, update_user
from tgbot.services.checker import check_phone
from tgbot.services.saver import save_call_request, save_message


async def call(message: Message, state: FSMContext) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É /call.
    –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –∏–º—è.
    """

    await state.finish()
    async with state.proxy() as data:
        data['last_command'] = 'call'
        data['user_id'] = int(message.from_user.id)

    user = await get_or_create_user(user_id=int(message.from_user.id))
    if user.fullname == '–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ' or user.phone_number == '–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
        await UsersStates.user_fullname.set()
    else:
        async with state.proxy() as data:
            data['user_fullname'] = user.fullname
            data['user_phone'] = user.phone_number
        await message.answer(f'–í–∞—à–µ –∏–º—è: <b>{user.fullname}</b>\n'
                             f'–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: <b>{user.phone_number}</b>\n'
                             f'üí° –í—Å—ë –≤–µ—Ä–Ω–æ?',
                             reply_markup=personal_data_choice, parse_mode='html')


async def change_personal_data(call: CallbackQuery) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏.
    """

    await call.message.edit_reply_markup(reply_markup=None)
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')
    await UsersStates.user_fullname.set()


async def confirm_personal_data(call: CallbackQuery, state: FSMContext) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–≤–µ–¥–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫:
    save_call_request - –µ—Å–ª–∏ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /call;
    save_message - –µ—Å–ª–∏ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /mess
    –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ–ø—Ä–æ—Å - –µ—Å–ª–∏ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /menu
    """

    await call.message.edit_reply_markup(reply_markup=None)
    states = await state.get_data()
    try:
        if states.get('last_command') == 'call':
            await save_call_request(message=call.message, state=state)
        elif states.get('last_command') == 'mess':
            await save_message(call.message, state)
        elif states.get('last_command') == 'menu':
            await ProductStates.address.set()
            await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏')
    except Exception:
        await state.finish()
        await call.message.answer('üö´ <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.</b> –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –≤–≤–µ–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n'
                                  '–ù–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/start</b> –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', parse_mode='html')


async def get_fullname(message: Message, state: FSMContext) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –≤–≤–æ–¥ –∏–º–µ–Ω–∏.
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–º—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–≤–µ–¥–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É.
    –ï—Å–ª–∏ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /mess - –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ save_message,
    –∏–Ω–∞—á–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω.
    """

    async with state.proxy() as data:
        data['user_fullname'] = message.text

    states = await state.get_data()
    if states.get('last_command') == 'mess':
        await save_message(message, state)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79012345678\n–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É',
                             reply_markup=share_phone)
        await UsersStates.user_phone.set()


async def get_phone(message: Message, state: FSMContext) -> None:
    """
    –•—ç–Ω–¥–ª–µ—Ä, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–π –Ω–∞ –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–µ–π "check_phone" –≤–≤–µ–¥—ë–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å.
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (update_user).
    –ï—Å–ª–∏ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /call - –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ save_call_request.
    –ï—Å–ª–∏ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /menu - –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ–ø—Ä–æ—Å.
    """

    phone_number = await check_phone(message)

    if phone_number:
        async with state.proxy() as data:
            data['user_phone'] = phone_number
        states = await state.get_data()
        await update_user(user_id=states.get('user_id'),
                          full_name=states.get('user_fullname'),
                          phone=states.get('user_phone'))

        states = await state.get_data()
        if states.get('last_command') == 'call':
            await save_call_request(message, state)
        elif states.get('last_command') == 'menu':
            await ProductStates.address.set()
            await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏')


def register_call(dp: Dispatcher):
    dp.register_message_handler(call, commands=["call"], state="*", is_banned=False),
    dp.register_message_handler(get_fullname, state=UsersStates.user_fullname),
    dp.register_message_handler(get_phone, state=UsersStates.user_phone, content_types=['contact', 'text'], is_banned=False),
    dp.register_callback_query_handler(change_personal_data, text='change_pers_data', state="*"),
    dp.register_callback_query_handler(confirm_personal_data, text='confirm_pers_data', state="*", is_banned=False)
